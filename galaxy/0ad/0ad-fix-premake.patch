From c8a816332638c3b5d73318b62c8d11cb87a275c2 Mon Sep 17 00:00:00 2001
From: Ralph Sennhauser <ralph.sennhauser@gmail.com>
Date: Wed, 19 Feb 2025 20:01:43 +0100
Subject: [PATCH 1/3] Add semver.lua for use by premake

Also extend it by compairsion operators <= and >=

This will probably also be useful for checking versions of dependencies.

Signed-off-by: Ralph Sennhauser <ralph.sennhauser@gmail.com>
---
 build/premake/semver/README.md       |   4 +
 build/premake/semver/init.lua        |  18 +++
 build/premake/semver/semver_orig.lua | 210 +++++++++++++++++++++++++++
 3 files changed, 232 insertions(+)
 create mode 100644 build/premake/semver/README.md
 create mode 100644 build/premake/semver/init.lua
 create mode 100644 build/premake/semver/semver_orig.lua

diff --git a/build/premake/semver/README.md b/build/premake/semver/README.md
new file mode 100644
index 0000000000..2930f7d08d
--- /dev/null
+++ b/build/premake/semver/README.md
@@ -0,0 +1,4 @@
+# Module for compairing semantic versions
+
+Uses https://github.com/kikito/semver.lua as basis and adds >= and <=
+compairsion support.
diff --git a/build/premake/semver/init.lua b/build/premake/semver/init.lua
new file mode 100644
index 0000000000..b6f68ede06
--- /dev/null
+++ b/build/premake/semver/init.lua
@@ -0,0 +1,18 @@
+local semver = require("semver_orig")
+
+local mt = getmetatable(semver)
+function mt:__le(other)
+  if self.major == other.major and
+     self.minor == other.minor and
+     self.patch == other.patch and
+     self.prerelease == other.prerelease then
+	 return true
+  end
+  if self.major ~= other.major then return self.major < other.major end
+  if self.minor ~= other.minor then return self.minor < other.minor end
+  if self.patch ~= other.patch then return self.patch < other.patch end
+  return smallerPrerelease(self.prerelease, other.prerelease)
+end
+setmetatable(semver, mt)
+
+return semver
diff --git a/build/premake/semver/semver_orig.lua b/build/premake/semver/semver_orig.lua
new file mode 100644
index 0000000000..fdd2bb1b01
--- /dev/null
+++ b/build/premake/semver/semver_orig.lua
@@ -0,0 +1,210 @@
+-- https://raw.githubusercontent.com/kikito/semver.lua/0c868789e8269459e9e309ed7b660cab4acb822c/semver.lua
+local semver = {
+  _VERSION     = '1.2.1',
+  _DESCRIPTION = 'semver for Lua',
+  _URL         = 'https://github.com/kikito/semver.lua',
+  _LICENSE     = [[
+    MIT LICENSE
+
+    Copyright (c) 2015 Enrique GarcÃ­a Cota
+
+    Permission is hereby granted, free of charge, to any person obtaining a
+    copy of tother software and associated documentation files (the
+    "Software"), to deal in the Software without restriction, including
+    without limitation the rights to use, copy, modify, merge, publish,
+    distribute, sublicense, and/or sell copies of the Software, and to
+    permit persons to whom the Software is furnished to do so, subject to
+    the following conditions:
+
+    The above copyright notice and this permission notice shall be included
+    in all copies or substantial portions of the Software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+  ]]
+}
+
+local function checkPositiveInteger(number, name)
+  assert(number >= 0, name .. ' must be a valid positive number')
+  assert(math.floor(number) == number, name .. ' must be an integer')
+end
+
+local function present(value)
+  return value and value ~= ''
+end
+
+-- splitByDot("a.bbc.d") == {"a", "bbc", "d"}
+local function splitByDot(str)
+  str = str or ""
+  local t, count = {}, 0
+  str:gsub("([^%.]+)", function(c)
+    count = count + 1
+    t[count] = c
+  end)
+  return t
+end
+
+local function parsePrereleaseAndBuildWithSign(str)
+  local prereleaseWithSign, buildWithSign = str:match("^(-[^+]+)(+.+)$")
+  if not (prereleaseWithSign and buildWithSign) then
+    prereleaseWithSign = str:match("^(-.+)$")
+    buildWithSign      = str:match("^(+.+)$")
+  end
+  assert(prereleaseWithSign or buildWithSign, ("The parameter %q must begin with + or - to denote a prerelease or a build"):format(str))
+  return prereleaseWithSign, buildWithSign
+end
+
+local function parsePrerelease(prereleaseWithSign)
+  if prereleaseWithSign then
+    local prerelease = prereleaseWithSign:match("^-(%w[%.%w-]*)$")
+    assert(prerelease, ("The prerelease %q is not a slash followed by alphanumerics, dots and slashes"):format(prereleaseWithSign))
+    return prerelease
+  end
+end
+
+local function parseBuild(buildWithSign)
+  if buildWithSign then
+    local build = buildWithSign:match("^%+(%w[%.%w-]*)$")
+    assert(build, ("The build %q is not a + sign followed by alphanumerics, dots and slashes"):format(buildWithSign))
+    return build
+  end
+end
+
+local function parsePrereleaseAndBuild(str)
+  if not present(str) then return nil, nil end
+
+  local prereleaseWithSign, buildWithSign = parsePrereleaseAndBuildWithSign(str)
+
+  local prerelease = parsePrerelease(prereleaseWithSign)
+  local build = parseBuild(buildWithSign)
+
+  return prerelease, build
+end
+
+local function parseVersion(str)
+  local sMajor, sMinor, sPatch, sPrereleaseAndBuild = str:match("^(%d+)%.?(%d*)%.?(%d*)(.-)$")
+  assert(type(sMajor) == 'string', ("Could not extract version number(s) from %q"):format(str))
+  local major, minor, patch = tonumber(sMajor), tonumber(sMinor), tonumber(sPatch)
+  local prerelease, build = parsePrereleaseAndBuild(sPrereleaseAndBuild)
+  return major, minor, patch, prerelease, build
+end
+
+
+-- return 0 if a == b, -1 if a < b, and 1 if a > b
+local function compare(a,b)
+  return a == b and 0 or a < b and -1 or 1
+end
+
+local function compareIds(myId, otherId)
+  if myId == otherId then return  0
+  elseif not myId    then return -1
+  elseif not otherId then return  1
+  end
+
+  local selfNumber, otherNumber = tonumber(myId), tonumber(otherId)
+
+  if selfNumber and otherNumber then -- numerical comparison
+    return compare(selfNumber, otherNumber)
+  -- numericals are always smaller than alphanums
+  elseif selfNumber then
+    return -1
+  elseif otherNumber then
+    return 1
+  else
+    return compare(myId, otherId) -- alphanumerical comparison
+  end
+end
+
+local function smallerIdList(myIds, otherIds)
+  local myLength = #myIds
+  local comparison
+
+  for i=1, myLength do
+    comparison = compareIds(myIds[i], otherIds[i])
+    if comparison ~= 0 then
+      return comparison == -1
+    end
+    -- if comparison == 0, continue loop
+  end
+
+  return myLength < #otherIds
+end
+
+local function smallerPrerelease(mine, other)
+  if mine == other or not mine then return false
+  elseif not other then return true
+  end
+
+  return smallerIdList(splitByDot(mine), splitByDot(other))
+end
+
+local methods = {}
+
+function methods:nextMajor()
+  return semver(self.major + 1, 0, 0)
+end
+function methods:nextMinor()
+  return semver(self.major, self.minor + 1, 0)
+end
+function methods:nextPatch()
+  return semver(self.major, self.minor, self.patch + 1)
+end
+
+local mt = { __index = methods }
+function mt:__eq(other)
+  return self.major == other.major and
+         self.minor == other.minor and
+         self.patch == other.patch and
+         self.prerelease == other.prerelease
+         -- notice that build is ignored for precedence in semver 2.0.0
+end
+function mt:__lt(other)
+  if self.major ~= other.major then return self.major < other.major end
+  if self.minor ~= other.minor then return self.minor < other.minor end
+  if self.patch ~= other.patch then return self.patch < other.patch end
+  return smallerPrerelease(self.prerelease, other.prerelease)
+  -- notice that build is ignored for precedence in semver 2.0.0
+end
+-- This works like the "pessimisstic operator" in Rubygems.
+-- if a and b are versions, a ^ b means "b is backwards-compatible with a"
+-- in other words, "it's safe to upgrade from a to b"
+function mt:__pow(other)
+  if self.major == 0 then
+    return self == other
+  end
+  return self.major == other.major and
+         self.minor <= other.minor
+end
+function mt:__tostring()
+  local buffer = { ("%d.%d.%d"):format(self.major, self.minor, self.patch) }
+  if self.prerelease then table.insert(buffer, "-" .. self.prerelease) end
+  if self.build      then table.insert(buffer, "+" .. self.build) end
+  return table.concat(buffer)
+end
+
+local function new(major, minor, patch, prerelease, build)
+  assert(major, "At least one parameter is needed")
+
+  if type(major) == 'string' then
+    major,minor,patch,prerelease,build = parseVersion(major)
+  end
+  patch = patch or 0
+  minor = minor or 0
+
+  checkPositiveInteger(major, "major")
+  checkPositiveInteger(minor, "minor")
+  checkPositiveInteger(patch, "patch")
+
+  local result = {major=major, minor=minor, patch=patch, prerelease=prerelease, build=build}
+  return setmetatable(result, mt)
+end
+
+setmetatable(semver, { __call = function(_, ...) return new(...) end })
+semver._VERSION= semver(semver._VERSION)
+
+return semver
-- 
2.43.5


From 721bd262c5d9eb8e0e489257953229d40632bada Mon Sep 17 00:00:00 2001
From: Ralph Sennhauser <ralph.sennhauser@gmail.com>
Date: Wed, 19 Feb 2025 20:07:09 +0100
Subject: [PATCH 2/3] Bump premake to version 5.0.0-beta5

This makes 5.0.0-beta5 the minimally supported version as the gmake2
action was renamed to gmake while gmake was renamed to gmakelegacy.

Clear out all old version dependent code.

Signed-off-by: Ralph Sennhauser <ralph.sennhauser@gmail.com>
---
 build/premake/cxxtest/cxxtest.lua      |  6 ++--
 build/premake/extern_libs5.lua         | 48 ++++----------------------
 build/premake/pkgconfig/pkgconfig.lua  | 26 +++-----------
 build/premake/premake5.lua             | 24 ++++++-------
 build/workspaces/update-workspaces.sh  |  4 +--
 libraries/source/premake-core/build.sh |  2 +-
 6 files changed, 29 insertions(+), 81 deletions(-)

diff --git a/build/premake/cxxtest/cxxtest.lua b/build/premake/cxxtest/cxxtest.lua
index 70840b70a2..c9e35d5c26 100644
--- a/build/premake/cxxtest/cxxtest.lua
+++ b/build/premake/cxxtest/cxxtest.lua
@@ -41,7 +41,7 @@ function m.init(have_std, have_eh, runner, includes, root_includes)
 
 	-- With gmake, create a Utility project that generates the test root file
 	-- This is a workaround for https://github.com/premake/premake-core/issues/286
-	if _ACTION == "gmake2" then
+	if _ACTION == "gmake" then
 		project "cxxtestroot"
 		kind "Makefile"
 
@@ -64,7 +64,7 @@ function m.configure_project(hdrfiles)
 
 	-- Generate the root file, or make sure the utility for generating
 	-- it is a dependancy with gmake.
-	if _ACTION == "gmake2" then
+	if _ACTION == "gmake" then
 		dependson { "cxxtestroot" }
 	else
 		prebuildmessage 'Generating test root file'
@@ -92,7 +92,7 @@ function m.configure_project(hdrfiles)
 
 	-- Add source files
 	files { "%{wks.location}/generated/test_root.cpp" }
-	if not (_ACTION == "gmake2") then
+	if not (_ACTION == "gmake") then
 		for _,hdrfile in ipairs(hdrfiles) do
 			local srcfile = "%{wks.location}/generated/".. path.getbasename(hdrfile) .. ".cpp"
 			files { srcfile }
diff --git a/build/premake/extern_libs5.lua b/build/premake/extern_libs5.lua
index 987fdfdbb0..d7471e294e 100644
--- a/build/premake/extern_libs5.lua
+++ b/build/premake/extern_libs5.lua
@@ -30,33 +30,15 @@ local function add_source_lib_paths(extern_lib)
 end
 
 local function add_default_include_paths(extern_lib)
-	-- As of premake5-beta2, `sysincludedirs` has been deprecated in favour of
-	-- `externalincludedirs`, and continuing to use it causes warnings to be emitted.
-	--
-	-- We use `externalincludedirs` when available to prevent the warnings, falling back
-	-- to `sysincludedirs` when not to prevent breakage of the `--with-system-premake5`
-	-- build argument.
-	if externalincludedirs then
-		externalincludedirs { libraries_dir .. extern_lib .. "/include" }
-	else
-		sysincludedirs { libraries_dir .. extern_lib .. "/include" }
-	end
+	externalincludedirs { libraries_dir .. extern_lib .. "/include" }
 end
 
 local function add_source_include_paths(extern_lib)
-	if externalincludedirs then
-		externalincludedirs { libraries_source_dir .. extern_lib .. "/include" }
-	else
-		sysincludedirs { libraries_source_dir .. extern_lib .. "/include" }
-	end
+	externalincludedirs { libraries_source_dir .. extern_lib .. "/include" }
 end
 
 local function add_third_party_include_paths(extern_lib)
-	if externalincludedirs then
-		externalincludedirs { third_party_source_dir .. extern_lib .. "/include" }
-	else
-		sysincludedirs { third_party_source_dir .. extern_lib .. "/include" }
-	end
+	externalincludedirs { third_party_source_dir .. extern_lib .. "/include" }
 end
 
 local function wx_config_path()
@@ -231,11 +213,7 @@ extern_lib_defs = {
 			end
 			-- TODO: This actually applies to most libraries we use on BSDs, make this a global setting.
 			if os.istarget("bsd") then
-				if externalincludedirs then
-					externalincludedirs { "/usr/local/include" }
-				else
-					sysincludedirs { "/usr/local/include" }
-				end
+				externalincludedirs { "/usr/local/include" }
 			end
 		end,
 		link_settings = function()
@@ -266,11 +244,7 @@ extern_lib_defs = {
 	cxxtest = {
 		compile_settings = function()
 			if not _OPTIONS["with-system-cxxtest"] then
-				if externalincludedirs then
-					externalincludedirs { libraries_source_dir .. "cxxtest-4.4" }
-				else
-					sysincludedirs { libraries_source_dir .. "cxxtest-4.4" }
-				end
+				externalincludedirs { libraries_source_dir .. "cxxtest-4.4" }
 				-- Upstream uses WIN32 instead of _WIN32 define
 				if os.istarget("windows") then
 					defines { "WIN32" }
@@ -650,18 +624,10 @@ extern_lib_defs = {
 				end
 			else
 				filter "Debug"
-					if externalincludedirs then
-						externalincludedirs { libraries_source_dir.."spidermonkey/include-debug" }
-					else
-						sysincludedirs { libraries_source_dir.."spidermonkey/include-debug" }
-					end
+					externalincludedirs { libraries_source_dir.."spidermonkey/include-debug" }
 					defines { "DEBUG" }
 				filter "Release"
-					if externalincludedirs then
-						externalincludedirs { libraries_source_dir.."spidermonkey/include-release" }
-					else
-						sysincludedirs { libraries_source_dir.."spidermonkey/include-release" }
-					end
+					externalincludedirs { libraries_source_dir.."spidermonkey/include-release" }
 				filter { }
 			end
 		end,
diff --git a/build/premake/pkgconfig/pkgconfig.lua b/build/premake/pkgconfig/pkgconfig.lua
index 28d20490bd..1f06c8b0ad 100644
--- a/build/premake/pkgconfig/pkgconfig.lua
+++ b/build/premake/pkgconfig/pkgconfig.lua
@@ -47,33 +47,17 @@ end
 function m.add_includes(lib, alternative_cmd, alternative_flags)
 	local dirs, files, options = parse_pkg_config_includes(lib, alternative_cmd, alternative_flags)
 
-	-- As of premake5-beta2, `sysincludedirs` has been deprecated in favour of
-	-- `externalincludedirs`, and continuing to use it causes warnings to be emitted.
-	-- We use `externalincludedirs` when available to prevent the warnings, falling back
-	-- to `sysincludedirs` when not to prevent breakage of the `--with-system-premake5`
-	-- build argument.
-	if externalincludedirs then
-		externalincludedirs(dirs)
-	else
-		sysincludedirs(dirs)
-	end
-
+	externalincludedirs(dirs)
 	forceincludes(files)
 	buildoptions(options)
 end
 
 function m.add_includes_after(lib, alternative_cmd, alternative_flags)
-	-- Support for includedirsafter was added after the 5.0.0-beta2 release.
-	-- Fall back if unavailable to support `--with-system-premake5`
-	if includedirsafter then
-		local dirs, files, options = parse_pkg_config_includes(lib, alternative_cmd, alternative_flags)
+	local dirs, files, options = parse_pkg_config_includes(lib, alternative_cmd, alternative_flags)
 
-		includedirsafter(dirs)
-		forceincludes(files)
-		buildoptions(options)
-	else
-		m.add_includes(lib, alternative_cmd, alternative_flags)
-	end
+	includedirsafter(dirs)
+	forceincludes(files)
+	buildoptions(options)
 end
 
 function m.add_links(lib, alternative_cmd, alternative_flags)
diff --git a/build/premake/premake5.lua b/build/premake/premake5.lua
index dd7d6c6584..ee01d02a94 100644
--- a/build/premake/premake5.lua
+++ b/build/premake/premake5.lua
@@ -1,3 +1,12 @@
+local semver = require("semver")
+
+if (semver("5.0.0-beta5") <= semver(_PREMAKE_VERSION)) then
+	print("Using premake " .. _PREMAKE_VERSION .. "...")
+else
+	print("Requires Premake 5.0.0-beta5 or later")
+	os.exit(1)
+end
+
 newoption { category = "Pyrogenesis", trigger = "android", description = "Use non-working Android cross-compiling mode" }
 newoption { category = "Pyrogenesis", trigger = "coverage", description = "Enable code coverage data collection (GCC only)" }
 newoption { category = "Pyrogenesis", trigger = "gles", description = "Use non-working OpenGL ES 2.0 mode" }
@@ -27,12 +36,6 @@ newoption { category = "Pyrogenesis", trigger = "bindir", description = "Directo
 newoption { category = "Pyrogenesis", trigger = "datadir", description = "Directory for data files (typically '/usr/share/games/0ad'); default is ../data/ relative to executable" }
 newoption { category = "Pyrogenesis", trigger = "libdir", description = "Directory for libraries (typically '/usr/lib/games/0ad'); default is ./ relative to executable" }
 
-if _ACTION == "gmake" then
-	print("Premake action 'gmake' is no longer supported by pyrogenesis, use 'gmake2'")
-	print("Example: 'premake5 --file=build/premake/premake5.lua gmake2'")
-	os.exit(1)
-end
-
 -- On Windows check if wxWidgets is available, if not disable atlas and emit warning.
 -- This is because there are currently not prebuilt binaries provided.
 if not _OPTIONS["without-atlas"] and os.istarget("windows") then
@@ -209,12 +212,7 @@ function project_set_build_flags()
 			optimize "Speed"
 		end
 		if _OPTIONS["with-lto"] then
-			if linktimeoptimization then
-				linktimeoptimization("On")
-			else
-				-- deprecated since v5.0.0-beta4
-				flags { "LinkTimeOptimization" }
-			end
+			linktimeoptimization("On")
 		end
 		defines { "NDEBUG", "CONFIG_FINAL=1" }
 
@@ -425,7 +423,7 @@ function project_set_build_flags()
 				end
 
 				-- Adding the executable path and taking care of correct escaping
-				if _ACTION == "gmake2" then
+				if _ACTION == "gmake" then
 					linkoptions { "-Wl,-rpath,'$$ORIGIN'" }
 				elseif _ACTION == "codeblocks" then
 					linkoptions { "-Wl,-R\\\\$$$ORIGIN" }
diff --git a/build/workspaces/update-workspaces.sh b/build/workspaces/update-workspaces.sh
index c6fe4ea3ec..e35b150229 100755
--- a/build/workspaces/update-workspaces.sh
+++ b/build/workspaces/update-workspaces.sh
@@ -53,10 +53,10 @@ export HOSTTYPE="$HOSTTYPE"
 echo "Premake args: ${premake_args}"
 if [ "$OS" != "Darwin" ]; then
 	# shellcheck disable=SC2086
-	${premake_command} --file="premake5.lua" --outpath="../workspaces/gcc/" ${premake_args} gmake2 || die "Premake failed"
+	${premake_command} --file="premake5.lua" --outpath="../workspaces/gcc/" ${premake_args} gmake || die "Premake failed"
 else
 	# shellcheck disable=SC2086
-	${premake_command} --file="premake5.lua" --outpath="../workspaces/gcc/" --macosx-version-min="${MIN_OSX_VERSION}" ${premake_args} gmake2 || die "Premake failed"
+	${premake_command} --file="premake5.lua" --outpath="../workspaces/gcc/" --macosx-version-min="${MIN_OSX_VERSION}" ${premake_args} gmake || die "Premake failed"
 	# Also generate xcode workspaces if on OS X
 	# shellcheck disable=SC2086
 	${premake_command} --file="premake5.lua" --outpath="../workspaces/xcode4" --macosx-version-min="${MIN_OSX_VERSION}" ${premake_args} xcode4 || die "Premake failed"
diff --git a/libraries/source/premake-core/build.sh b/libraries/source/premake-core/build.sh
index d779c91783..448da22947 100755
--- a/libraries/source/premake-core/build.sh
+++ b/libraries/source/premake-core/build.sh
@@ -8,7 +8,7 @@ set -e
 
 cd "$(dirname "$0")"
 
-PV=5.0.0-beta4
+PV=5.0.0-beta5
 LIB_VERSION=${PV}+wfg0
 
 fetch()
-- 
2.43.5


From 3a5846e9b45638490a4bf84ac12d38c0cbed786c Mon Sep 17 00:00:00 2001
From: Ralph Sennhauser <ralph.sennhauser@gmail.com>
Date: Wed, 19 Feb 2025 21:33:28 +0100
Subject: [PATCH 3/3] Test exit code for update-workspace.bat

---
 build/workspaces/update-workspaces.bat | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/build/workspaces/update-workspaces.bat b/build/workspaces/update-workspaces.bat
index 51cfea2011..214a02fcb7 100644
--- a/build/workspaces/update-workspaces.bat
+++ b/build/workspaces/update-workspaces.bat
@@ -3,5 +3,5 @@ rem ** Create Visual Studio Workspaces on Windows **
 
 cd /D "%~dp0"
 cd ..\bin
-if not exist ..\workspaces\vs2017\SKIP_PREMAKE_HERE premake5.exe --file="../premake/premake5.lua" --outpath="../workspaces/vs2017" %* vs2017
+if not exist ..\workspaces\vs2017\SKIP_PREMAKE_HERE premake5.exe --file="../premake/premake5.lua" --outpath="../workspaces/vs2017" %* vs2017 || exit /b
 cd ..\workspaces
-- 
2.43.5

