From b7208663a1e6c7115342eedafd5971f2726c9d01 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ball=C3=B3=20Gy=C3=B6rgy?= <ballogyor@gmail.com>
Date: Sat, 24 Feb 2024 22:04:16 +0100
Subject: [PATCH 1/2] backend: Add fallback to gtksink

This implements an automatic fallback from gtkglsink to gtksink in the following cases:

1. When the environment variable 'TOTEM_USE_GST_GTKSINK=1' is specified.

2. When the GTK GL context cannot be initialized due to insufficient GL driver.

3. When a software GL rasteriser (llvmpipe or softpipe) is used, because gtksink performs better in this case.
---
 src/backend/bacon-video-widget.c | 98 ++++++++++++++++++++++++++++----
 src/backend/meson.build          |  2 +
 2 files changed, 89 insertions(+), 11 deletions(-)

diff --git a/src/backend/bacon-video-widget.c b/src/backend/bacon-video-widget.c
index 15b5930f6..2b39949a9 100644
--- a/src/backend/bacon-video-widget.c
+++ b/src/backend/bacon-video-widget.c
@@ -43,6 +43,9 @@
 /* for the cover metadata info */
 #include <gst/tag/tag.h>
 
+/* for detecting GL vendor/renderer */
+#include <epoxy/gl.h>
+
 /* system */
 #include <unistd.h>
 #include <time.h>
@@ -171,6 +174,7 @@ struct _BaconVideoWidget
   gint64                       current_time;
   gdouble                      current_position;
   gboolean                     is_live;
+  gboolean                     use_gl;
 
   GstTagList                  *tagcache;
   GstTagList                  *audiotags;
@@ -259,6 +263,7 @@ static void bacon_video_widget_get_property (GObject * object,
 
 static void bacon_video_widget_finalize (GObject * object);
 
+static void bvw_init_video_sink (BaconVideoWidget *bvw);
 static void bvw_reconfigure_fill_timeout (BaconVideoWidget *bvw, guint msecs);
 static void bvw_stop_play_pipeline (BaconVideoWidget * bvw);
 static GError* bvw_error_from_gst_error (BaconVideoWidget *bvw, GstMessage *m);
@@ -403,6 +408,8 @@ bacon_video_widget_realize (GtkWidget * widget)
 
   GTK_WIDGET_CLASS (parent_class)->realize (widget);
 
+  bvw_init_video_sink (bvw);
+
   window = gtk_widget_get_window (widget);
   display = gdk_window_get_display (window);
   bvw->hand_cursor = gdk_cursor_new_for_display (display, GDK_HAND2);
@@ -5400,12 +5407,7 @@ is_feature_enabled (const char *env)
 static void
 bacon_video_widget_init (BaconVideoWidget *bvw)
 {
-  GstElement *audio_sink = NULL;
   gchar *version_str;
-  GstPlayFlags flags;
-  GstElement *glsinkbin, *audio_bin;
-  GstPad *audio_pad;
-  char *template;
 
   gtk_widget_set_can_focus (GTK_WIDGET (bvw), TRUE);
 
@@ -5444,19 +5446,83 @@ bacon_video_widget_init (BaconVideoWidget *bvw)
 			 GDK_BUTTON_RELEASE_MASK |
 			 GDK_KEY_PRESS_MASK);
   gtk_widget_init_template (GTK_WIDGET (bvw));
+}
+
+static inline gboolean
+bvw_gl_check (GtkWidget *widget)
+{
+  static gsize gl_works = 0;
+
+  if (is_feature_enabled ("TOTEM_USE_GST_GTKSINK")) {
+    return FALSE;
+  }
+
+  if (g_once_init_enter (&gl_works)) {
+    GError *error = NULL;
+    gsize works = 1;
+    GdkGLContext *context;
+    GdkWindow *window;
+
+    if ((window = gtk_widget_get_window (widget)) &&
+        (context = gdk_window_create_gl_context (window, &error))) {
+      const gchar *vendor, *renderer;
+
+      gdk_gl_context_make_current (context);
+
+      vendor = (const gchar *) glGetString (GL_VENDOR);
+      renderer = (const gchar *) glGetString (GL_RENDERER);
+
+      GST_INFO ("GL Vendor: %s, renderer: %s", vendor, renderer);
+
+      if (g_str_has_prefix (renderer, "llvmpipe") ||
+          g_str_has_prefix (renderer, "softpipe"))
+        GST_INFO ("Detected software GL rasterizer, falling back to gtksink");
+      else
+        works = 2;
+
+      gdk_gl_context_clear_current ();
+    }
+
+    if (error) {
+      GST_WARNING ("Could not window to create GL context, %s", error->message);
+      g_error_free (error);
+    }
+
+    g_once_init_leave (&gl_works, works);
+  }
+
+  return (gl_works > 1);
+}
+
+static void
+bvw_init_video_sink (BaconVideoWidget *bvw)
+{
+  GstElement *audio_sink = NULL;
+  GstPlayFlags flags;
+  GstElement *glsinkbin, *audio_bin;
+  GstPad *audio_pad;
+  char *template;
+
+  bvw->use_gl = bvw_gl_check (GTK_WIDGET (bvw));
 
   /* Instantiate all the fallible plugins */
   bvw->play = element_make_or_warn ("playbin", "play");
   bvw->audio_pitchcontrol = element_make_or_warn ("scaletempo", "scaletempo");
-  bvw->video_sink = element_make_or_warn ("gtkglsink", "video-sink");
-  glsinkbin = element_make_or_warn ("glsinkbin", "glsinkbin");
+
+  if (bvw->use_gl) {
+    bvw->video_sink = element_make_or_warn ("gtkglsink", "video-sink");
+    glsinkbin = element_make_or_warn ("glsinkbin", "glsinkbin");
+  } else {
+    bvw->video_sink = element_make_or_warn ("gtksink", "video-sink");
+  }
+
   audio_sink = element_make_or_warn ("autoaudiosink", "audio-sink");
 
   if (!bvw->play ||
       !bvw->audio_pitchcontrol ||
       !bvw->video_sink ||
       !audio_sink ||
-      !glsinkbin) {
+      (bvw->use_gl && !glsinkbin)) {
     if (bvw->video_sink)
       g_object_ref_sink (bvw->video_sink);
     if (audio_sink)
@@ -5501,11 +5567,20 @@ bacon_video_widget_init (BaconVideoWidget *bvw)
   if (is_feature_enabled ("FPS_DISPLAY")) {
     GstElement *fps;
     fps = gst_element_factory_make ("fpsdisplaysink", "fpsdisplaysink");
-    g_object_set (glsinkbin, "sink", fps, NULL);
+
+    if (bvw->use_gl)
+      g_object_set (glsinkbin, "sink", fps, NULL);
+    else
+      g_object_set (bvw->play, "video-sink", fps, NULL);
+
     g_object_set (fps, "video-sink", bvw->video_sink, NULL);
   } else {
-    g_object_set (glsinkbin, "sink", bvw->video_sink, NULL);
+    if (bvw->use_gl)
+      g_object_set (glsinkbin, "sink", bvw->video_sink, NULL);
+    else
+      g_object_set (bvw->play, "video-sink", bvw->video_sink, NULL);
   }
+
   g_object_get (bvw->video_sink, "widget", &bvw->video_widget, NULL);
   gtk_widget_show (bvw->video_widget);
   gtk_stack_add_named (GTK_STACK (bvw->stack), bvw->video_widget, "video");
@@ -5517,7 +5592,8 @@ bacon_video_widget_init (BaconVideoWidget *bvw)
                 NULL);
 
   /* And tell playbin */
-  g_object_set (bvw->play, "video-sink", glsinkbin, NULL);
+  if (bvw->use_gl)
+    g_object_set (bvw->play, "video-sink", glsinkbin, NULL);
 
   /* Link the audiopitch element */
   bvw->audio_capsfilter =
diff --git a/src/backend/meson.build b/src/backend/meson.build
index 93b086b07..592eea304 100644
--- a/src/backend/meson.build
+++ b/src/backend/meson.build
@@ -23,6 +23,7 @@ endforeach
 gst_good_plugins = [
   'autoaudiosink',
   'scaletempo',
+  'gtksink',
   'gtkglsink',
   'glsinkbin'
 ]
@@ -72,6 +73,7 @@ libbacon_video_widget_deps = [
   libtotem_time_helpers_dep,
   gtk_dep,
   gmodule_dep,
+  dependency('epoxy'),
 ]
 
 libbacon_video_widget_cflags = common_flags + warn_flags + [
-- 
GitLab


From 5ec64d1e3fdc3eaa18a922902243bb2cb722f3f6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ball=C3=B3=20Gy=C3=B6rgy?= <ballogyor@gmail.com>
Date: Sat, 22 Jun 2024 12:58:17 +0200
Subject: [PATCH 2/2] rotation: Hide rotate option if gl is not used

rotate-method is not supported by gtksink.
---
 src/backend/bacon-video-widget.c      | 35 ++++++++++++++++++++++-----
 src/backend/bacon-video-widget.h      |  2 ++
 src/plugins/rotation/totem-rotation.c |  5 ++++
 3 files changed, 36 insertions(+), 6 deletions(-)

diff --git a/src/backend/bacon-video-widget.c b/src/backend/bacon-video-widget.c
index 2b39949a9..191c3b61a 100644
--- a/src/backend/bacon-video-widget.c
+++ b/src/backend/bacon-video-widget.c
@@ -3797,9 +3797,12 @@ bvw_stop_play_pipeline (BaconVideoWidget * bvw)
   bvw->buffering_left = -1;
   bvw_reconfigure_fill_timeout (bvw, 0);
   g_signal_emit (bvw, bvw_signals[SIGNAL_BUFFERING], 0, 100.0);
-  g_object_set (bvw->video_sink,
-                "rotate-method", GST_VIDEO_ORIENTATION_AUTO,
-                NULL);
+
+  if (bvw->use_gl)
+    g_object_set (bvw->video_sink,
+                  "rotate-method", GST_VIDEO_ORIENTATION_AUTO,
+                  NULL);
+
   GST_DEBUG ("stopped");
 }
 
@@ -4408,6 +4411,9 @@ bacon_video_widget_set_rotation (BaconVideoWidget *bvw,
 {
   g_return_if_fail (BACON_IS_VIDEO_WIDGET (bvw));
 
+  if (!bvw->use_gl)
+    return;
+
   GST_DEBUG ("Rotating to %s (%f degrees) from %s",
 	     g_enum_to_string (BVW_TYPE_ROTATION, rotation),
 	     rotation * 90.0,
@@ -4433,6 +4439,22 @@ bacon_video_widget_get_rotation (BaconVideoWidget *bvw)
   return bvw->rotation;
 }
 
+/**
+ * bacon_video_widget_use_gl:
+ * @bvw: a #BaconVideoWidget
+ *
+ * Returns whether gl is used.
+ *
+ * Return value: %TRUE if gl is used, %FALSE otherwise
+ **/
+gboolean
+bacon_video_widget_use_gl (BaconVideoWidget *bvw)
+{
+  g_return_val_if_fail (BACON_IS_VIDEO_WIDGET (bvw), FALSE);
+
+  return bvw->use_gl;
+}
+
 /* Search for the color balance channel corresponding to type and return it. */
 static GstColorBalanceChannel *
 bvw_get_color_balance_channel (GstColorBalance * color_balance,
@@ -5587,9 +5609,10 @@ bvw_init_video_sink (BaconVideoWidget *bvw)
   g_object_unref (bvw->video_widget);
   gtk_stack_set_visible_child_name (GTK_STACK (bvw->stack), "video");
 
-  g_object_set (bvw->video_sink,
-                "rotate-method", GST_VIDEO_ORIENTATION_AUTO,
-                NULL);
+  if (bvw->use_gl)
+    g_object_set (bvw->video_sink,
+                  "rotate-method", GST_VIDEO_ORIENTATION_AUTO,
+                  NULL);
 
   /* And tell playbin */
   if (bvw->use_gl)
diff --git a/src/backend/bacon-video-widget.h b/src/backend/bacon-video-widget.h
index 81a0f288a..f681de33a 100644
--- a/src/backend/bacon-video-widget.h
+++ b/src/backend/bacon-video-widget.h
@@ -276,6 +276,8 @@ BvwZoomMode bacon_video_widget_get_zoom		 (BaconVideoWidget *bvw);
 void bacon_video_widget_set_rotation		 (BaconVideoWidget *bvw,
 						  BvwRotation       rotation);
 BvwRotation bacon_video_widget_get_rotation	 (BaconVideoWidget *bvw);
+gboolean bacon_video_widget_use_gl	         (BaconVideoWidget *bvw);
+
 
 int bacon_video_widget_get_video_property        (BaconVideoWidget *bvw,
 						  BvwVideoProperty type);
diff --git a/src/plugins/rotation/totem-rotation.c b/src/plugins/rotation/totem-rotation.c
index 6227a13f2..7329e6a61 100644
--- a/src/plugins/rotation/totem-rotation.c
+++ b/src/plugins/rotation/totem-rotation.c
@@ -208,6 +208,11 @@ impl_activate (PeasActivatable *plugin)
 
 	pi->totem = g_object_get_data (G_OBJECT (plugin), "object");
 	pi->bvw = totem_object_get_video_widget (pi->totem);
+
+	/* rotate-method is not supported by gtksink */
+	if (!bacon_video_widget_use_gl (BACON_VIDEO_WIDGET (pi->bvw)))
+		return;
+
 	pi->cancellable = g_cancellable_new ();
 
 	g_signal_connect (pi->totem,
-- 
GitLab

