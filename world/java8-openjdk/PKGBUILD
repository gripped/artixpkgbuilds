# Maintainer: Levente Polyak <anthraxx[at]archlinux[dot]org>
# Maintainer: Frederik Schwan <freswa at archlinux dot org>
# Maintainer: Guillaume ALAUX <guillaume@archlinux.org>
# Contributor: Boyan Ding <stu_dby@126.com>

pkgbase=java8-openjdk
pkgname=(
jre8-openjdk-headless
jre8-openjdk
jdk8-openjdk
openjdk8-src
openjdk8-doc
)

_majorver=8
_minorver=472
_updatever=08
pkgver=${_majorver}.${_minorver}.u${_updatever}
pkgrel=1
arch=('x86_64')
url='https://openjdk.java.net/'
license=('LicenseRef-Java')
makedepends=(
  alsa-lib
  bash
  cpio
  fontconfig
  giflib
  git
  java-environment=8
  libcups
  libxrender
  libxtst
  unzip
  zip
)
optdepends=(
  'gvfs: open links e.g. hyperlinks'
)
options=(
  !lto
)
source=(
  https://github.com/openjdk/jdk${_majorver}u/archive/refs/tags/jdk${_majorver}u${_minorver}-b${_updatever}.tar.gz
)
b2sums=('4ce86687b29882a3e1add166c9f31818e3253f58f198f17d076acda3b15523baec7c51540aefe14ca237191656472f841eeb09cb69e59548ebc4cd5a267c04ec')

case "${CARCH}" in
  'x86_64'  ) _JARCH=amd64   ; _DOC_ARCH=x86_64  ;;
  'i686'    ) _JARCH=i386    ; _DOC_ARCH=x86     ;;
  'aarch64' ) _JARCH=aarch64 ; _DOC_ARCH=aarch64 ;;
esac

_jdkname=openjdk8
_jvmdir=/usr/lib/jvm/java-8-openjdk
_prefix="jdk8u/image"
_imgdir="${_prefix}/jvm/openjdk-1.8.0_$(printf '%.2d' ${_minorver})"
_nonheadless=(
  bin/policytool
  lib/${_JARCH}/libjsound.so
  lib/${_JARCH}/libjsoundalsa.so
  lib/${_JARCH}/libsplashscreen.so
)

prepare() {
  cd jdk8u-jdk${_majorver}u${_minorver}-b${_updatever}

  # Do not treats warnings as errors
  sed -E -i 's/(^WARNINGS_ARE_ERRORS = -W)(error)/\1no-\2/' \
    hotspot/make/linux/makefiles/gcc.make

  # bool is a keyword in C23.
  install -Dm755 /dev/stdin "gcc" <<END
#!/bin/sh
exec /usr/bin/gcc -std=gnu17 "\$@"
END

  # The use of the "register" keyword as storage class specifier has been removed in C++17.
  install -Dm755 /dev/stdin "g++" <<END
#!/bin/sh
exec /usr/bin/g++ -std=gnu++14 "\$@"
END

  # Fix build with glibc 2.42 due to uabs() name collision
  # https://bugs.openjdk.org/browse/JDK-8354941
  sed -i 's/uabs(/g_uabs(/' \
    hotspot/src/cpu/aarch64/vm/assembler_aarch64.cpp \
    hotspot/src/cpu/aarch64/vm/assembler_aarch64.hpp \
    hotspot/src/cpu/aarch64/vm/macroAssembler_aarch64.cpp \
    hotspot/src/cpu/aarch64/vm/stubGenerator_aarch64.cpp \
    hotspot/src/share/vm/opto/mulnode.cpp \
    hotspot/src/share/vm/utilities/globalDefinitions.hpp
}

build() {
  cd jdk8u-jdk${_majorver}u${_minorver}-b${_updatever}

  unset JAVA_HOME

  # remove -j from MAKEFLAGS to prevent build fail
  local MAKEFLAG_J=$(echo ${MAKEFLAGS} | sed -En 's/.*-j([0-9]+).*/\1/p')
  export MAKEFLAGS=${MAKEFLAGS/-j${MAKEFLAG_J}/}

  # Avoid optimization of HotSpot being lowered from O3 to O2
  # -fno-exceptions for FS#73134
  export CFLAGS="${CFLAGS//-O2/-O3} -fno-lifetime-dse -fno-delete-null-pointer-checks -fno-exceptions -Wno-error=int-conversion -Wno-error=incompatible-pointer-types"
  export CXXFLAGS="${CXXFLAGS} -fno-exceptions"

  # Use gcc and g++ wrappers to set standards as CFLAGS are used when building some C++ files.
  PATH="$PWD":$PATH

  install -d -m 755 "${srcdir}/${_prefix}/"
  bash configure \
    --prefix="${srcdir}/${_prefix}" \
    --with-update-version="${_minorver}" \
    --with-build-number="b${_updatever}" \
    --with-milestone="fcs" \
    --enable-unlimited-crypto \
    --with-giflib=system \
    --with-zlib=system \
    --with-extra-cflags="${CFLAGS}" \
    --with-extra-cxxflags="${CXXFLAGS}" \
    --with-extra-ldflags="${LDFLAGS}" \
    --with-vendor-name="Artix Linux"

  # These help to debug builds: LOG=trace HOTSPOT_BUILD_JOBS=1
  # Without 'DEBUG_BINARIES', i686 won't build: http://mail.openjdk.java.net/pipermail/core-libs-dev/2013-July/019203.html
  make
  make docs

  # FIXME sadly 'DESTDIR' is not used here!
  make install

  cd ../${_imgdir}

  # A lot of build stuff were directly taken from
  # http://pkgs.fedoraproject.org/cgit/java-1.8.0-openjdk.git/tree/java-1.8.0-openjdk.spec

  # http://icedtea.classpath.org/bugzilla/show_bug.cgi?id=1437
  find . -iname '*.jar' -exec chmod ugo+r {} \;
  chmod ugo+r lib/ct.sym

  # remove redundant *diz and *debuginfo files
  find . -iname '*.diz' -exec rm {} \;
  find . -iname '*.debuginfo' -exec rm {} \;
}

check() {
  cd jdk8u-jdk${_majorver}u${_minorver}-b${_updatever}
  #make -k test
}

package_jre8-openjdk-headless() {
  pkgdesc='OpenJDK Java 8 headless runtime environment'
  depends=(
    java-runtime-common
    ca-certificates-utils
    nss
  )
  optdepends=(
    'java-rhino: for some JavaScript support'
  )
  provides=(
    'java-runtime-headless=8'
    'java-runtime-headless-openjdk=8'
  )
  # Upstream config files that should go to etc and get backup
  _backup_etc=(
    etc/java-8-openjdk/${_JARCH}/jvm.cfg
    etc/java-8-openjdk/calendars.properties
    etc/java-8-openjdk/content-types.properties
    etc/java-8-openjdk/flavormap.properties
    etc/java-8-openjdk/images/cursors/cursors.properties
    etc/java-8-openjdk/logging.properties
    etc/java-8-openjdk/management/jmxremote.access
    etc/java-8-openjdk/management/jmxremote.password
    etc/java-8-openjdk/management/management.properties
    etc/java-8-openjdk/management/snmp.acl
    etc/java-8-openjdk/net.properties
    etc/java-8-openjdk/psfont.properties.ja
    etc/java-8-openjdk/psfontj2d.properties
    etc/java-8-openjdk/security/java.policy
    etc/java-8-openjdk/security/java.security
    etc/java-8-openjdk/sound.properties
  )
  replaces=(
    'jre8-openjdk-headless-wm'
  )
  backup=(
    ${_backup_etc[@]}
  )
  install=install_jre8-openjdk-headless.sh

  cd ${_imgdir}/jre

  install -d -m 755 "${pkgdir}${_jvmdir}/jre/"
  cp -a bin lib "${pkgdir}${_jvmdir}/jre"

  cp ../release "${pkgdir}${_jvmdir}" # FS#52692

  # Set config files
  mv "${pkgdir}${_jvmdir}"/jre/lib/management/jmxremote.password{.template,}
  mv "${pkgdir}${_jvmdir}"/jre/lib/management/snmp.acl{.template,}

  # Remove 'non-headless' lib files
  for f in "${_nonheadless[@]}"; do
    rm "${pkgdir}${_jvmdir}/jre/${f}"
  done

  # Man pages
  pushd "${pkgdir}${_jvmdir}/jre/bin"
  install -d -m 755 "${pkgdir}"/usr/share/man/{,ja/}man1/
  for file in *; do
    if [ -f "${srcdir}/${_imgdir}/man/man1/${file}.1" ]; then
      install -m 644 "${srcdir}/${_imgdir}/man/man1/${file}.1" \
        "${pkgdir}/usr/share/man/man1/${file}-${_jdkname}.1"
    fi
    if [ -f "${srcdir}/${_imgdir}/man/ja/man1/${file}.1" ]; then
      install -m 644 "${srcdir}/${_imgdir}/man/ja/man1/${file}.1" \
        "${pkgdir}/usr/share/man/ja/man1/${file}-${_jdkname}.1"
    fi
  done
  popd

  # Link JKS keystore from ca-certificates-utils
  rm -f "${pkgdir}${_jvmdir}/jre/lib/security/cacerts"
  ln -sf /etc/ssl/certs/java/cacerts "${pkgdir}${_jvmdir}/jre/lib/security/cacerts"

  # Install license
  install -d -m 755 "${pkgdir}/usr/share/licenses/${pkgbase}/"
  install -m 644 ASSEMBLY_EXCEPTION LICENSE THIRD_PARTY_README \
                 "${pkgdir}/usr/share/licenses/${pkgbase}"
  ln -sf /usr/share/licenses/${pkgbase} "${pkgdir}/usr/share/licenses/${pkgname}"

  # Move config files that were set in _backup_etc from ./lib to /etc
  for file in "${_backup_etc[@]}"; do
    _filepkgpath=${_jvmdir}/jre/lib/${file#etc/java-8-openjdk/}
    install -D -m 644 "${pkgdir}${_filepkgpath}" "${pkgdir}/${file}"
    ln -sf /${file} "${pkgdir}${_filepkgpath}"
  done
}

package_jre8-openjdk() {
  pkgdesc='OpenJDK Java 8 full runtime environment'
  depends=(
    "jre8-openjdk-headless=${pkgver}-${pkgrel}"
    giflib
    hicolor-icon-theme
    xdg-utils
  )
  optdepends=(
    'icedtea-web: web browser plugin + Java Web Start'
    'alsa-lib: for basic sound support'
    'gtk3: for the Gtk+ look and feel - desktop usage'
    'java8-openjfx: for JavaFX GUI components support'
  )
  provides=(
    'java-runtime=8'
    'java-runtime-openjdk=8'
  )
  install=install_jre8-openjdk.sh
  replaces=(
    jre8-openjdk-wm
  )

  cd ${_imgdir}/jre

  for f in "${_nonheadless[@]}"; do
    install -D ${f} "${pkgdir}${_jvmdir}/jre/${f}"
  done

  # Man pages
  pushd "${pkgdir}${_jvmdir}/jre/bin"
  install -d -m 755 "${pkgdir}"/usr/share/man/{,ja/}man1/
  for file in *; do
    install -m 644 "${srcdir}/${_imgdir}/man/man1/${file}.1" \
      "${pkgdir}/usr/share/man/man1/${file}-${_jdkname}.1"
    install -m 644 "${srcdir}/${_imgdir}/man/ja/man1/${file}.1" \
      "${pkgdir}/usr/share/man/ja/man1/${file}-${_jdkname}.1"
  done
  popd

  # Install license
  install -d -m 755 "${pkgdir}/usr/share/licenses/${pkgbase}/"
  ln -sf /usr/share/licenses/${pkgbase} "${pkgdir}/usr/share/licenses/${pkgname}"
}

package_jdk8-openjdk() {
  pkgdesc='OpenJDK Java 8 development kit'
  depends=(
    "jre8-openjdk=${pkgver}-${pkgrel}"
    java-environment-common
  )
  provides=(
    'java-environment=8'
    'java-environment-openjdk=8'
  )
  replaces=(
    'jdk8-openjdk-wm'
  )
  install=install_jdk8-openjdk.sh

  cd ${_imgdir}

  # Main files
  install -d -m 755 "${pkgdir}${_jvmdir}"

  cp -a include lib "${pkgdir}${_jvmdir}"

  # 'bin' files
  pushd bin

  # 'java-rmi.cgi' will be handled separately as it should not be in the PATH and has no man page
  for b in $(ls | grep -v java-rmi.cgi); do
    if [ -e ../jre/bin/${b} ]; then
      # Provide a link of the jre binary in the jdk/bin/ directory
      ln -s ../jre/bin/${b} "${pkgdir}${_jvmdir}/bin/${b}"
    else
      # Copy binary to jdk/bin/
      install -D -m 755 ${b} "${pkgdir}${_jvmdir}/bin/${b}"
      # Copy man page
      if [ -f ../man/man1/${b}.1 ]; then
        install -D -m 644 ../man/man1/${b}.1 "${pkgdir}/usr/share/man/man1/${b}-${_jdkname}.1"
      fi
      if [ -f ../man/ja/man1/${b}.1 ]; then
        install -D -m 644 ../man/ja/man1/${b}.1 "${pkgdir}/usr/share/man/ja/man1/${b}-${_jdkname}.1"
      fi
    fi
  done
  popd

  # Handling 'java-rmi.cgi' separately
  install -D -m 755 bin/java-rmi.cgi "${pkgdir}${_jvmdir}/bin/java-rmi.cgi"

  # link license
  install -d -m 755 "${pkgdir}/usr/share/licenses/"
  ln -sf /usr/share/licenses/${pkgbase} "${pkgdir}/usr/share/licenses/${pkgname}"
}

package_openjdk8-src() {
  pkgdesc='OpenJDK Java 8 sources'

  install -D "${srcdir}/${_imgdir}/src.zip" "${pkgdir}${_jvmdir}/src.zip"
}

package_openjdk8-doc() {
  pkgdesc='OpenJDK Java 8 documentation'

  install -d -m 755 "${pkgdir}/usr/share/doc/${pkgbase}/"
  cp -r "${srcdir}"/jdk8u-jdk${_majorver}u${_minorver}-b${_updatever}/build/linux-${_DOC_ARCH}-normal-server-release/docs/* \
    "${pkgdir}/usr/share/doc/${pkgbase}/"
}

# vim: ts=2 sw=2 et:
