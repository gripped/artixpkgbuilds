From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Sophie Herold <sophie@hemio.de>
Date: Tue, 23 Sep 2025 01:11:12 +0200
Subject: [PATCH] glycin/sandbox: Close all unused FDs in fork

Before we were sharing all FDs that don't have CLOEXEC set. In Rust
that's usually not a problem because that's set by default. But when
used by C in libglycin this is much more unclear.

This is an attempt at fixing Firefox issues:

- <https://gitlab.freedesktop.org/drm/amd/-/issues/4568#note_3106823>
- <https://gitlab.freedesktop.org/mesa/mesa/-/issues/13877>
- <https://bugzilla.redhat.com/show_bug.cgi?id=2391242>
- <https://bugzilla.mozilla.org/show_bug.cgi?id=1986254>
---
 glycin/src/sandbox.rs                | 37 ++++++++++++++++++++--------
 news.d/2.0.1/fixed-sandbox-close-fds |  1 +
 2 files changed, 28 insertions(+), 10 deletions(-)
 create mode 100644 news.d/2.0.1/fixed-sandbox-close-fds

diff --git a/glycin/src/sandbox.rs b/glycin/src/sandbox.rs
index baa3ced02846..13ae600726a8 100644
--- a/glycin/src/sandbox.rs
+++ b/glycin/src/sandbox.rs
@@ -2,7 +2,7 @@
 
 use std::fs::{canonicalize, DirEntry, File};
 use std::io::{self, BufRead, BufReader, Seek};
-use std::os::fd::AsRawFd;
+use std::os::fd::{AsRawFd, BorrowedFd};
 use std::os::unix::net::UnixStream;
 use std::os::unix::process::{CommandExt, ExitStatusExt};
 use std::path::{Path, PathBuf};
@@ -209,40 +209,57 @@ impl Sandbox {
     pub async fn spawn(self) -> Result<SpawnedSandbox, Error> {
         let dbus_fd = self.dbus_socket.as_raw_fd();
 
+        let mut shared_fds = Vec::new();
+
         let (mut command, seccomp_fd) = match self.sandbox_mechanism {
             SandboxMechanism::Bwrap => {
                 let seccomp_memfd = Self::seccomp_export_bpf(&self.seccomp_filter()?)?;
                 let command = self.bwrap_command(&seccomp_memfd).await?;
 
+                shared_fds.push(seccomp_memfd.as_raw_fd());
+
                 (command, Some(seccomp_memfd))
             }
             SandboxMechanism::FlatpakSpawn => {
                 let command = self.flatpak_spawn_command();
 
                 (command, None)
             }
             SandboxMechanism::NotSandboxed => {
                 eprintln!("WARNING: Glycin running without sandbox.");
                 let command = self.no_sandbox_command();
 
                 (command, None)
             }
         };
 
         command.arg("--dbus-fd");
         command.arg(dbus_fd.to_string());
 
-        // Allow FD to be passed to child process
-        let mut flags = nix::fcntl::FdFlag::from_bits_truncate(nix::fcntl::fcntl(
-            &self.dbus_socket,
-            nix::fcntl::FcntlArg::F_GETFD,
-        )?);
-        flags.remove(nix::fcntl::FdFlag::FD_CLOEXEC);
-        nix::fcntl::fcntl(&self.dbus_socket, nix::fcntl::FcntlArg::F_SETFD(flags))?;
-
+        command.stdin(Stdio::piped());
         command.stderr(Stdio::piped());
         command.stdout(Stdio::piped());
 
+        shared_fds.push(self.dbus_socket.as_raw_fd());
+
+        unsafe {
+            command.pre_exec(move || {
+                libc::close_range(3, libc::c_uint::MAX, libc::CLOSE_RANGE_CLOEXEC as i32);
+
+                // Allow FDs to be passed to child process
+                for raw_fd in &shared_fds {
+                    let fd = BorrowedFd::borrow_raw(*raw_fd);
+                    if let Ok(flags) = nix::fcntl::fcntl(&fd, nix::fcntl::FcntlArg::F_GETFD) {
+                        let mut flags = nix::fcntl::FdFlag::from_bits_truncate(flags);
+                        flags.remove(nix::fcntl::FdFlag::FD_CLOEXEC);
+                        let _ = nix::fcntl::fcntl(&fd, nix::fcntl::FcntlArg::F_SETFD(flags));
+                    }
+                }
+
+                Ok(())
+            });
+        }
+
         Ok(SpawnedSandbox {
             command,
             _seccomp_fd: seccomp_fd,
@@ -434,7 +451,7 @@ impl Sandbox {
         // Loader binary
         command.arg(self.exec());
 
-        // Set sandbox memory limit
+        // Let flatpak-spawn die if the thread calling it exits
         unsafe {
             command.pre_exec(|| {
                 nix::sys::prctl::set_pdeathsig(nix::sys::signal::SIGKILL).map_err(Into::into)
diff --git a/news.d/2.0.1/fixed-sandbox-close-fds b/news.d/2.0.1/fixed-sandbox-close-fds
new file mode 100644
index 000000000000..94a48ffcab8c
--- /dev/null
+++ b/news.d/2.0.1/fixed-sandbox-close-fds
@@ -0,0 +1 @@
+Close all unused FDs in fork. Before we were sharing all FDs that don't have CLOEXEC set. In Rust that's usually not a problem because that's set by default. But when used by C in libglycin this is much more unclear. This is an attempt at fixing Firefox issues.
