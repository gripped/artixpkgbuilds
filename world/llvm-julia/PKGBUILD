# Maintainer: Cory Sanin <corysanin@artixlinux.org>
# Contributor: Antonio Rojas <arojas@archlinux.org>
# Contributor: Evangelos Foutras <foutrelis@archlinux.org>
# Contributor: Jan "heftig" Steffens <jan.steffens@gmail.com>

pkgname=(llvm-julia
         llvm-julia-libs)
pkgver=18.1.7.4
_pkgver=${pkgver%.*}-${pkgver##*.}
_majver=${pkgver%.*.*.*}
pkgrel=2
arch=(x86_64)
url='https://julialang.org/'
license=('custom:Apache 2.0 with LLVM Exception')
depends=(gcc-libs
         glibc
         zlib
         zstd)
makedepends=(cmake
             git
             libedit
             libffi
             libxml2
             ncurses
             ninja
             python)
options=(!lto) # https://github.com/llvm/llvm-project/issues/57740
source=(llvm-julia::git+https://github.com/JuliaLang/llvm-project#tag=julia-$_pkgver)
sha256sums=('626b1bf1acf34d95dd23bf5f56e715c3975b6ccbf5bf12494b0007b14640da63')

prepare() {
  cd llvm-julia
  git cherry-pick -n 20dbc097256ca1bf1cfeb738d7a4610d379da8f5 \
                     18021ff5420ed1945f9aa1e67679094112680f6b \
                     7b28655847aa1d37dbf7e09f57a3db0284874115 # Fix build with GCC 15
}

# Utilizing LLVM_DISTRIBUTION_COMPONENTS to avoid
# installing static libraries; inspired by Gentoo
_get_distribution_components() {
  local target
  ninja -t targets | grep -Po 'install-\K.*(?=-stripped:)' | while read -r target; do
    case $target in
      llvm-libraries|distribution)
        continue
        ;;
      # shared libraries
      LLVM|LLVMgold)
        ;;
      # libraries needed for julia
      LLVMDemangle|LLVMSupport|LLVMTableGen|LLVMTargetParser)
        ;;
      # exclude static libraries
      LLVM*)
        continue
        ;;
      # exclude llvm-exegesis (doesn't seem useful without libpfm)
      llvm-exegesis)
        continue
        ;;
    esac
    echo $target
  done
}

build() {
  # Build only minimal debug info to reduce size
  CFLAGS=${CFLAGS/-g /-g1 }
  CXXFLAGS=${CXXFLAGS/-g /-g1 }

  _symver="JL_LLVM_$(echo $pkgver | cut -d. -f1-2)"
  local cmake_args=(
    -G Ninja
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_INSTALL_PREFIX=/usr/lib/llvm-julia
    -DCMAKE_SKIP_RPATH=ON
    -DLLVM_BINUTILS_INCDIR=/usr/include
    -DLLVM_BUILD_LLVM_DYLIB=ON
    -DLLVM_BUILD_TESTS=ON
    -DLLVM_ENABLE_BINDINGS=OFF
    -DLLVM_ENABLE_FFI=ON
    -DLLVM_ENABLE_RTTI=ON
    -DLLVM_HOST_TRIPLE=$CHOST
    -DLLVM_INCLUDE_BENCHMARKS=OFF
    -DLLVM_INSTALL_UTILS=ON
    -DLLVM_LINK_LLVM_DYLIB=ON
    -DLLVM_USE_PERF=ON
    -DLLVM_VERSION_SUFFIX=jl
    -DLLVM_SHLIB_SYMBOL_VERSION=$_symver
  )

  cmake -B build -S llvm-julia/llvm \
     "${cmake_args[@]}"
  pushd build
    local distribution_components=$(_get_distribution_components | paste -sd\;)
    test -n "$distribution_components"
    cmake_args+=(-DLLVM_DISTRIBUTION_COMPONENTS="$distribution_components")
  popd

  cmake -B build -S llvm-julia/llvm \
    "${cmake_args[@]}"
  cmake --build build
}

package_llvm-julia() {
  pkgdesc="Compiler infrastructure - Julia fork"
  depends+=(llvm-julia-libs)

  DESTDIR="$pkgdir" cmake --build build --target install-distribution

  # The runtime libraries go into llvm-julia-libs
  mv -f "$pkgdir"/usr/lib/llvm-julia/lib/{libLLVM-${_majver}jl.so,libLLVM.so.${pkgver%.*.*}jl} .
  mv -f "$pkgdir"/usr/lib/llvm-julia/lib/LLVMgold.so "$srcdir/"

  install -Dm644 llvm-julia/llvm/LICENSE.TXT "$pkgdir"/usr/share/licenses/$pkgname/LICENSE
}

package_llvm-julia-libs() {
  pkgdesc="LLVM runtime libraries - Julia fork"
  depends+=(libedit
            libffi
            libxml2
            ncurses)

  install -d "$pkgdir/usr/lib/llvm-julia/lib"
  for _lib in libLLVM-${_majver}jl.so libLLVM.so.${pkgver%.*.*}jl; do
    cp -P $_lib "$pkgdir"/usr/lib
    ln -s ../../$_lib "$pkgdir"/usr/lib/llvm-julia/lib/$_lib
  done
  cp -P LLVMgold.so "$pkgdir/usr/lib/llvm-julia/lib/"

  install -Dm644 llvm-julia/llvm/LICENSE.TXT "$pkgdir"/usr/share/licenses/$pkgname/LICENSE
}
