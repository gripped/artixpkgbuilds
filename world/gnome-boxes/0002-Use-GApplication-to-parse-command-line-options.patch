From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ball=C3=B3=20Gy=C3=B6rgy?= <ballogyor@gmail.com>
Date: Wed, 23 Apr 2025 20:09:28 +0200
Subject: [PATCH] Use GApplication to parse command line options

It already supports adding and parsing option entries, so it's not
necessary to parse them manually.
---
 src/app.vala  | 72 ++++++++++++++++++---------------------------------
 src/main.vala |  1 +
 2 files changed, 26 insertions(+), 47 deletions(-)

diff --git a/src/app.vala b/src/app.vala
index 7369691282e0..6657e863fc8b 100644
--- a/src/app.vala
+++ b/src/app.vala
@@ -55,11 +55,29 @@ private class Boxes.App: Gtk.Application {
 
     private uint inhibit_cookie = 0;
 
+    static bool opt_fullscreen;
+    static string opt_open_uuid;
+    static string[] opt_uris;
+    [CCode (array_length=false, array_null_terminated=true)]
+    static string[] opt_search;
+    const OptionEntry[] options = {
+        { "version", 0, 0, OptionArg.NONE, null, N_("Display version number"), null },
+        { "full-screen", 'f', 0, OptionArg.NONE, null, N_("Open in full screen"), null },
+        { "checks", 0, 0, OptionArg.NONE, null, N_("Check virtualization capabilities"), null },
+        { "open-uuid", 0, 0, OptionArg.STRING, null, N_("Open box with UUID"), null },
+        { "search", 0, 0, OptionArg.STRING_ARRAY, null, N_("Search term"), null },
+        { null }
+    };
+
     public App () {
         application_id = Config.APPLICATION_ID;
         flags |= ApplicationFlags.HANDLES_COMMAND_LINE | ApplicationFlags.HANDLES_OPEN;
         resource_base_path = "/org/gnome/Boxes";
 
+        set_option_context_parameter_string (_("— A simple application to access virtual machines"));
+        add_main_option_entries (options);
+        add_option_group (Spice.get_option_group ());
+
         app = this;
         async_launcher = AsyncLauncher.get_default ();
         windows = new List<Boxes.AppWindow> ();
@@ -166,69 +184,29 @@ public override void activate () {
         window.show_welcome_tutorial ();
     }
 
-    static bool opt_fullscreen;
-    static bool opt_help;
-    static string opt_open_uuid;
-    static string[] opt_uris;
-    [CCode (array_length=false, array_null_terminated=true)]
-    static string[] opt_search;
-    const OptionEntry[] options = {
-        { "version", 0, 0, OptionArg.NONE, null, N_("Display version number"), null },
-        { "help", 'h', 0, OptionArg.NONE, ref opt_help, N_("Show help"), null },
-        { "full-screen", 'f', 0, OptionArg.NONE, ref opt_fullscreen, N_("Open in full screen"), null },
-        { "checks", 0, 0, OptionArg.NONE, null, N_("Check virtualization capabilities"), null },
-        { "open-uuid", 0, 0, OptionArg.STRING, ref opt_open_uuid, N_("Open box with UUID"), null },
-        { "search", 0, 0, OptionArg.STRING_ARRAY, ref opt_search, N_("Search term"), null },
-        // A 'broker' is a virtual-machine manager (local or remote). Currently only libvirt is supported.
-        { "", 0, 0, OptionArg.STRING_ARRAY, ref opt_uris, N_("URL to display, broker or installer media"), null },
-        { null }
-    };
-
     public override int command_line (GLib.ApplicationCommandLine cmdline) {
-        opt_fullscreen = false;
-        opt_help = false;
-        opt_open_uuid = null;
-        opt_uris = null;
-        opt_search = null;
+        var options = cmdline.get_options_dict ();
 
-        var parameter_string = _("— A simple application to access virtual machines");
-        var opt_context = new OptionContext (parameter_string);
-        opt_context.add_main_entries (options, null);
-        opt_context.add_group (Spice.get_option_group ());
-        opt_context.add_group (Gtk.get_option_group (true));
-        opt_context.set_help_enabled (false);
-
-        try {
-            string[] args1 = cmdline.get_arguments();
-            unowned string[] args2 = args1;
-            opt_context.parse (ref args2);
-        } catch (OptionError error) {
-            cmdline.printerr ("%s\n", error.message);
-            cmdline.printerr (opt_context.get_help (true, null));
-            return 1;
-        }
-
-        if (opt_help) {
-            cmdline.printerr (opt_context.get_help (true, null));
-            return 1;
-        }
+        options.lookup ("full-screen", "b", out opt_fullscreen);
+        options.lookup ("open-uuid", "s", out opt_open_uuid);
+        options.lookup ("search", "^as", out opt_search);
+        opt_uris = cmdline.get_arguments ()[1:];
 
         if (opt_uris.length > 1 ||
-            (opt_open_uuid != null && opt_uris != null)) {
+            (opt_open_uuid != null && opt_uris[0] != null)) {
             cmdline.printerr (_("Too many command line arguments specified.\n"));
-            cmdline.printerr (opt_context.get_help (true, null));
             return 1;
         }
 
         activate ();
 
         var app = this;
         if (opt_open_uuid != null) {
             var uuid = opt_open_uuid;
             call_when_ready (() => {
                     app.open_uuid (uuid);
             });
-        } else if (opt_uris != null) {
+        } else if (opt_uris[0] != null) {
             var arg = opt_uris[0];
 
             call_when_ready (() => {
diff --git a/src/main.vala b/src/main.vala
index 2c17889057b8..d79a51de74b2 100644
--- a/src/main.vala
+++ b/src/main.vala
@@ -66,6 +66,7 @@ private async void run_checks () {
 }
 
 public int main (string[] args) {
+    Intl.setlocale (LocaleCategory.ALL, "");
     Intl.bindtextdomain (GETTEXT_PACKAGE, LOCALEDIR);
     Intl.bind_textdomain_codeset (GETTEXT_PACKAGE, "UTF-8");
     Intl.textdomain (GETTEXT_PACKAGE);
